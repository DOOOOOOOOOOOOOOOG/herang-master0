null = cyber(0);
inf = 127;

$plus(x, y) { len(cyber(x) | cyber(y)); };

$prev(x) { plus(x, 255); };
$next(x) { plus(x, 1); };
$front(s) { s[0]; };
$back(s) { s[prev(len(s))]; };
$pop_front(s) { slice(s, 1, len(s)); };
$pop_back(s) { slice(s, 0, prev(len(s))); };

$iota(n) {
    def result;
    @(i : cyber(n)) {
        def x; x = len(result);
        result = result | x;
    };
    result;
};

$fill(n, x) {
    def result; result = cyber(n);
    result[iota(n)] = x;
    result;
};

$reverse(s) {
    ?(len(s) > 1) {
        s = back(s) | reverse(pop_back(pop_front(s))) | front(s);
    };
    s;
};

minus_table = 0 | 255 | pop_back(reverse(iota(255)));
$minus(x, y) { plus(x, minus_table[y]); };

$read_number() {
    def x; x = trim(readline());
    def table; table = fill(128, inf);
    table[slice(iota(128), 48, 58)] = iota(10);
    def result;
    @(i : x) {
        ?(table[i] < 10) {
            result = table[i] | result;
        };
    };
    result;
};
$print_number(x) {
    def result;
    ?(x == 0) { result = 48; };
    @(i : x) { result = plus(i, 48) | result; };
    sprint(result);
};

$int_plus(s, t) {
    ?(len(s)<len(t)) {
        def o; o = s; s = t; t = o;
    };
    def result; result = s | 0;
    $c_plus(x, y) {
        def result; result = plus(x[0], y) | x[1];
        ?(result[0] >= 10) {
            result[0] = minus(result[0], 10);
            result[1] = plus(result[1], 1);
        };
        result;
    };
    def c; c = 0;
    @(i : iota(len(result))) {
        def p; p = 0;
        ?(i < len(t)) { p = t[i]; };
        def d; d = c_plus(c_plus(result[i] | 0, c), p);
        result[i] = d[0]; c = d[1];
    };
    ?(back(result) == 0) { result = pop_back(result); };
    result;
};

x = read_number();
y = read_number();
print_number(int_plus(x, y));
